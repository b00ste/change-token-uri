/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface LSP16UniversalFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computeAddress"
      | "computeERC1167Address"
      | "deployCreate2"
      | "deployCreate2AndInitialize"
      | "deployERC1167Proxy"
      | "deployERC1167ProxyAndInitialize"
      | "generateSalt"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [BytesLike, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeERC1167Address",
    values: [AddressLike, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCreate2",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCreate2AndInitialize",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployERC1167Proxy",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployERC1167ProxyAndInitialize",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSalt",
    values: [BytesLike, boolean, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeERC1167Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCreate2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCreate2AndInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployERC1167Proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployERC1167ProxyAndInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSalt",
    data: BytesLike
  ): Result;
}

export namespace ContractCreatedEvent {
  export type InputTuple = [
    createdContract: AddressLike,
    providedSalt: BytesLike,
    generatedSalt: BytesLike,
    initialized: boolean,
    initializeCalldata: BytesLike
  ];
  export type OutputTuple = [
    createdContract: string,
    providedSalt: string,
    generatedSalt: string,
    initialized: boolean,
    initializeCalldata: string
  ];
  export interface OutputObject {
    createdContract: string;
    providedSalt: string;
    generatedSalt: string;
    initialized: boolean;
    initializeCalldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LSP16UniversalFactory extends BaseContract {
  connect(runner?: ContractRunner | null): LSP16UniversalFactory;
  waitForDeployment(): Promise<this>;

  interface: LSP16UniversalFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeAddress: TypedContractMethod<
    [
      byteCodeHash: BytesLike,
      providedSalt: BytesLike,
      initializable: boolean,
      initializeCalldata: BytesLike
    ],
    [string],
    "view"
  >;

  computeERC1167Address: TypedContractMethod<
    [
      implementationContract: AddressLike,
      providedSalt: BytesLike,
      initializable: boolean,
      initializeCalldata: BytesLike
    ],
    [string],
    "view"
  >;

  deployCreate2: TypedContractMethod<
    [byteCode: BytesLike, providedSalt: BytesLike],
    [string],
    "payable"
  >;

  deployCreate2AndInitialize: TypedContractMethod<
    [
      byteCode: BytesLike,
      providedSalt: BytesLike,
      initializeCalldata: BytesLike,
      constructorMsgValue: BigNumberish,
      initializeCalldataMsgValue: BigNumberish
    ],
    [string],
    "payable"
  >;

  deployERC1167Proxy: TypedContractMethod<
    [implementationContract: AddressLike, providedSalt: BytesLike],
    [string],
    "nonpayable"
  >;

  deployERC1167ProxyAndInitialize: TypedContractMethod<
    [
      implementationContract: AddressLike,
      providedSalt: BytesLike,
      initializeCalldata: BytesLike
    ],
    [string],
    "payable"
  >;

  generateSalt: TypedContractMethod<
    [
      providedSalt: BytesLike,
      initializable: boolean,
      initializeCalldata: BytesLike
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeAddress"
  ): TypedContractMethod<
    [
      byteCodeHash: BytesLike,
      providedSalt: BytesLike,
      initializable: boolean,
      initializeCalldata: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeERC1167Address"
  ): TypedContractMethod<
    [
      implementationContract: AddressLike,
      providedSalt: BytesLike,
      initializable: boolean,
      initializeCalldata: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployCreate2"
  ): TypedContractMethod<
    [byteCode: BytesLike, providedSalt: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployCreate2AndInitialize"
  ): TypedContractMethod<
    [
      byteCode: BytesLike,
      providedSalt: BytesLike,
      initializeCalldata: BytesLike,
      constructorMsgValue: BigNumberish,
      initializeCalldataMsgValue: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployERC1167Proxy"
  ): TypedContractMethod<
    [implementationContract: AddressLike, providedSalt: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployERC1167ProxyAndInitialize"
  ): TypedContractMethod<
    [
      implementationContract: AddressLike,
      providedSalt: BytesLike,
      initializeCalldata: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "generateSalt"
  ): TypedContractMethod<
    [
      providedSalt: BytesLike,
      initializable: boolean,
      initializeCalldata: BytesLike
    ],
    [string],
    "view"
  >;

  getEvent(
    key: "ContractCreated"
  ): TypedContractEvent<
    ContractCreatedEvent.InputTuple,
    ContractCreatedEvent.OutputTuple,
    ContractCreatedEvent.OutputObject
  >;

  filters: {
    "ContractCreated(address,bytes32,bytes32,bool,bytes)": TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
    ContractCreated: TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
  };
}
